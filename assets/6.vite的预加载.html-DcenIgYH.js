import{_ as s,c as a,o as n,d as e}from"./app-CzcyFXHz.js";const t={},i=e(`<h1 id="vite的预加载" tabindex="-1"><a class="header-anchor" href="#vite的预加载"><span>vite的预加载</span></a></h1><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">import</span> _ <span class="token keyword">from</span> <span class="token string">&quot;lodash&quot;</span><span class="token punctuation">;</span> <span class="token comment">// lodash可能也import了其他的东西</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在处理的过程中如果说看到了有非绝对路径或者相对路径的引用, 他则会尝试开启路径补全</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">import</span> _ <span class="token keyword">from</span> <span class="token string">&quot;/node_modules/.vite/lodash&quot;</span><span class="token punctuation">;</span> <span class="token comment">// lodash可能也import了其他的东西</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> __vite__cjsImport0_lodash <span class="token keyword">from</span> <span class="token string">&quot;/node_modules/.vite/deps/lodash.js?v=ebe57916&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>找寻依赖的过程是自当前目录依次向上查找的过程, 直到搜寻到根目录或者搜寻到对应依赖为止 /user/node_modules/lodash, ../</p><p>生产 和开发</p><p>yarn dev ---&gt; 开发(每次依赖预构建所重新构建的相对路径都是正确的)</p><p>vite会全权交给一个叫做rollup的库去完成生产环境的打包</p><p>缓存 ---&gt;</p><p>实际上vite在考虑另外一个问题的时候就顺便把这个问题解决了</p><p>commonjs 规范的导出 module.exports</p><p>有的包他是以commonjs规范的格式导出 axios</p><p><strong>依赖预构建</strong>: 首先vite会找到对应的依赖, 然后调用esbuild(对js语法进行处理的一个库), 将其他规范的代码转换成esmodule规范, 然后放到当前目录下的node_modules/.vite/deps, 同时对esmodule规范的各个模块进行统一集成</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">// a </span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">export</span> <span class="token punctuation">{</span> <span class="token keyword">default</span> <span class="token keyword">as</span> a  <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./a.js&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>vite重写以后</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>他解决了3个问题:</p><ol><li>不同的第三方包会有不同的导出格式(这个是vite没法约束人家的事情)</li><li>对路径的处理上可以直接使用.vite/deps, 方便路径重写</li><li>叫做网络多包传输的性能问题(也是原生esmodule规范不敢支持node_modules的原因之一), 有了依赖预构建以后无论他有多少的额外export 和import, vite都会尽可能的将他们进行集成最后只生成一个或者几个模块</li></ol><p>vite.config.js === webpack.config.hs</p>`,20),p=[i];function l(o,c){return n(),a("div",null,p)}const r=s(t,[["render",l],["__file","6.vite的预加载.html.vue"]]),u=JSON.parse('{"path":"/frontend/vite/6.vite%E7%9A%84%E9%A2%84%E5%8A%A0%E8%BD%BD.html","title":"vite的预加载","lang":"zh","frontmatter":{},"headers":[],"git":{"updatedTime":1721029030000,"contributors":[{"name":"linannan","email":"linannan@prosnav.com","commits":1}]},"filePathRelative":"frontend/vite/6.vite的预加载.md"}');export{r as comp,u as data};
