import{_ as n,c as s,o as a,b as e}from"./app-CgltcQVY.js";const p={},t=e(`<h1 id="vite相较于webpack的优势" tabindex="-1"><a class="header-anchor" href="#vite相较于webpack的优势"><span>vite相较于webpack的优势</span></a></h1><p>官方文档: https://cn.vitejs.dev/guide/why.html#the-problems</p><p>然而，当我们开始构建越来越大型的应用时，需要处理的 JavaScript 代码量也呈指数级增长。包含数千个模块的大型项目相当普遍。我们开始遇到性能瓶颈 —— 使用 JavaScript 开发的工具通常需要很长时间（甚至是几分钟！）才能启动开发服务器，即使使用 HMR(热更新)，文件修改后的效果也需要几秒钟才能在浏览器中反映出来。如此循环往复，迟钝的反馈会极大地影响开发者的开发效率和幸福感。</p><p>起因: 我们的项目越大 ----&gt; 构建工具（webpack）所要处理的js代码就越多 【跟webpack的一个构建过程（工作流程）有关系】</p><p>造成的结果: 构建工具需要很长时间才能启动开发服务器 (启动开发服务器 ---&gt; 把项目跑起来)</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">yarn start</span>
<span class="line">yarn dev</span>
<span class="line"></span>
<span class="line">npm run dev </span>
<span class="line">npm run start</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种痛上过班才知道</p><p>webpack能不能改? 如果一旦要改 那么将会动到webpack的大动脉</p><p>webpack支持多种模块化: 你的工程可能不只是跑在浏览器端</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">// index.js</span></span>
<span class="line"><span class="token comment">// 这一段代码最终会到浏览器里去运行</span></span>
<span class="line"><span class="token keyword">const</span> lodash <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;lodash&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// commonjs 规范</span></span>
<span class="line"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span> <span class="token comment">// es6 module</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// webpack是允许我们这么写的</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>webpack的编译原理, AST 抽象语法分析的工具 分析出你写的这个js文件有哪些导入和导出操作 构建工具是运行在服务端的</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">// webpack的一个转换结果</span></span>
<span class="line"><span class="token keyword">const</span> lodash <span class="token operator">=</span> <span class="token function">webpack_require</span><span class="token punctuation">(</span><span class="token string">&quot;lodash&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> Vue <span class="token operator">=</span> <span class="token function">webpack_require</span><span class="token punctuation">(</span><span class="token string">&quot;vue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">modules</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">webpack_require</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 入口是index.js</span></span>
<span class="line">    <span class="token comment">// 通过webpack的配置文件得来的: webpack.config.js ./src/index.js</span></span>
<span class="line">    modules<span class="token punctuation">[</span>entry<span class="token punctuation">]</span><span class="token punctuation">(</span>webpack_require<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token string-property property">&quot;./src/index.js&quot;</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">webpack_require</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> lodash <span class="token operator">=</span> <span class="token function">webpack_require</span><span class="token punctuation">(</span><span class="token string">&quot;lodash&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">const</span> Vue <span class="token operator">=</span> <span class="token function">webpack_require</span><span class="token punctuation">(</span><span class="token string">&quot;vue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为webpack支持多种模块化, 他一开始必须要统一模块化代码, 所以意味着他需要将所有的依赖全部读一遍</p><p>vite会不会直接把webpack干翻, vite是基于es modules的, 侧重点不一样, webpack更多的关注兼容性, 而vite关注浏览器端的开发体验</p><ul><li>vite的上手难度更低, webpack的配置是非常多的, loader, plugin</li></ul>`,16),c=[t];function i(l,o){return a(),s("div",null,c)}const r=n(p,[["render",i],["__file","3. vite相较于webpack的优势.html.vue"]]),d=JSON.parse('{"path":"/frontend/vite/3.%20vite%E7%9B%B8%E8%BE%83%E4%BA%8Ewebpack%E7%9A%84%E4%BC%98%E5%8A%BF.html","title":"vite相较于webpack的优势","lang":"zh","frontmatter":{},"headers":[],"git":{"updatedTime":1721029030000,"contributors":[{"name":"linannan","email":"linannan@prosnav.com","commits":1}]},"filePathRelative":"frontend/vite/3. vite相较于webpack的优势.md"}');export{r as comp,d as data};
