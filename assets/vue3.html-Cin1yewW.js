import{_ as n,c as e,o as s,d as a}from"./app-CxrMoykp.js";const o={},t=a(`<h3 id="_1-vue-3相比vue-2的优势有哪些" tabindex="-1"><a class="header-anchor" href="#_1-vue-3相比vue-2的优势有哪些"><span>1. Vue 3相比Vue 2的优势有哪些？</span></a></h3><p><strong>答案</strong>：</p><ul><li><strong>性能更好</strong>：Vue 3使用Proxy代替DefineProperty，提高了响应式的性能。</li><li><strong>体积更小</strong>：Vue 3支持Tree Shaking，使生产环境构建更小。</li><li><strong>更好的TypeScript支持</strong>：Vue 3从设计之初就考虑了TS，API更加类型安全。</li><li><strong>更好的代码组织</strong>：引入Composition API，使得逻辑复用和组件状态管理更加清晰。</li><li><strong>更好的逻辑抽离</strong>：Composition API鼓励逻辑的模块化和复用。</li><li><strong>更多新功能</strong>：如Teleport、Suspense、Fragment等，增强了功能性和可维护性。</li></ul><h3 id="_2-vue-3的生命周期发生了哪些变化" tabindex="-1"><a class="header-anchor" href="#_2-vue-3的生命周期发生了哪些变化"><span>2. Vue 3的生命周期发生了哪些变化？</span></a></h3><p><strong>答案</strong>： Vue 3中提供了两种API风格来定义组件的生命周期：</p><ul><li><strong>Options API</strong>：保留了Vue 2的部分生命周期钩子，如<code>beforeCreate</code>, <code>created</code>, <code>mounted</code>, <code>updated</code>, <code>beforeUnmount</code>, <code>unmounted</code>等，但也有调整，如移除了<code>beforeDestroy</code>和<code>destroyed</code>，改为<code>beforeUnmount</code>和<code>unmounted</code>。</li><li><strong>Composition API</strong>：引入了新的函数式编程风格的生命周期钩子，如<code>onBeforeMount</code>, <code>onMounted</code>, <code>onBeforeUpdate</code>, <code>onUpdated</code>, <code>onBeforeUnmount</code>, <code>onUnmounted</code>等，以及<code>onRenderTracked</code>和<code>onRenderTriggered</code>用于追踪渲染过程。</li></ul><h3 id="_3-vue-3如何实现响应式系统" tabindex="-1"><a class="header-anchor" href="#_3-vue-3如何实现响应式系统"><span>3. Vue 3如何实现响应式系统？</span></a></h3><p><strong>答案</strong>： Vue 3使用<code>Proxy</code>和<code>Reflect</code>替代了Vue 2中的<code>Object.defineProperty</code>，来实现更高效的响应式系统。当使用<code>reactive</code>或<code>ref</code>函数时，Vue会创建一个Proxy对象来代理数据，可以拦截并处理数据的读取、设置、删除等操作，无需遍历对象属性，支持深度监听，且对数组的变化处理更加高效。</p><h3 id="_4-如何在vue-3中注册全局指令" tabindex="-1"><a class="header-anchor" href="#_4-如何在vue-3中注册全局指令"><span>4. 如何在Vue 3中注册全局指令？</span></a></h3><p><strong>答案</strong>： 在Vue 3中，使用<code>app.directive()</code>方法注册全局指令，例如：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">&#39;my-directive&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 处理指令挂载逻辑</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-vue-3中如何创建虚拟节点" tabindex="-1"><a class="header-anchor" href="#_5-vue-3中如何创建虚拟节点"><span>5. Vue 3中如何创建虚拟节点？</span></a></h3><p><strong>答案</strong>： Vue 3依然推荐使用渲染函数，其中<code>h()</code>函数用于创建虚拟节点，例如：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">&#39;my-class&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;Hello World&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-vue-3中的composition-api是什么" tabindex="-1"><a class="header-anchor" href="#_6-vue-3中的composition-api是什么"><span>6. Vue 3中的Composition API是什么？</span></a></h3><p><strong>答案</strong>： Composition API是一种新的组织和复用代码的方式，它允许开发者使用函数来组合组件的状态和行为。核心API包括<code>setup()</code>、<code>ref()</code>、<code>reactive()</code>、<code>computed()</code>等，这些API可以帮助开发者更好地管理和复用逻辑，提高代码的可维护性和可测试性。</p><h3 id="注意" tabindex="-1"><a class="header-anchor" href="#注意"><span>注意：</span></a></h3><p>面试时，解释每个概念时尽量结合实际应用案例，展示你对Vue 3特性的理解和实践能力。以上只是概要，具体面试时可能会要求更详细的解释和代码演示。</p>`,18),c=[t];function p(i,l){return s(),e("div",null,c)}const d=n(o,[["render",p],["__file","vue3.html.vue"]]),r=JSON.parse('{"path":"/interview/vue3.html","title":"","lang":"zh","frontmatter":{},"headers":[{"level":3,"title":"1. Vue 3相比Vue 2的优势有哪些？","slug":"_1-vue-3相比vue-2的优势有哪些","link":"#_1-vue-3相比vue-2的优势有哪些","children":[]},{"level":3,"title":"2. Vue 3的生命周期发生了哪些变化？","slug":"_2-vue-3的生命周期发生了哪些变化","link":"#_2-vue-3的生命周期发生了哪些变化","children":[]},{"level":3,"title":"3. Vue 3如何实现响应式系统？","slug":"_3-vue-3如何实现响应式系统","link":"#_3-vue-3如何实现响应式系统","children":[]},{"level":3,"title":"4. 如何在Vue 3中注册全局指令？","slug":"_4-如何在vue-3中注册全局指令","link":"#_4-如何在vue-3中注册全局指令","children":[]},{"level":3,"title":"5. Vue 3中如何创建虚拟节点？","slug":"_5-vue-3中如何创建虚拟节点","link":"#_5-vue-3中如何创建虚拟节点","children":[]},{"level":3,"title":"6. Vue 3中的Composition API是什么？","slug":"_6-vue-3中的composition-api是什么","link":"#_6-vue-3中的composition-api是什么","children":[]},{"level":3,"title":"注意：","slug":"注意","link":"#注意","children":[]}],"git":{"updatedTime":1721212931000,"contributors":[{"name":"linannan","email":"linannan@prosnav.com","commits":1}]},"filePathRelative":"interview/vue3.md"}');export{d as comp,r as data};
