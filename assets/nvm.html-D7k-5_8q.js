import{_ as n,c as s,o as e,b as a}from"./app-CgltcQVY.js";const l={},o=a(`<h2 id="如何更高效的在不同项目使用nvm切换不同的node版本" tabindex="-1"><a class="header-anchor" href="#如何更高效的在不同项目使用nvm切换不同的node版本"><span>如何更高效的在不同项目使用nvm切换不同的node版本</span></a></h2><p>使用 <code>nvm</code>（Node Version Manager）高效地在不同项目间切换 Node.js 版本，可以遵循以下最佳实践：</p><ol><li><p><strong>项目级 <code>.nvmrc</code> 文件</strong>：</p><ul><li>在每个项目根目录下创建一个 <code>.nvmrc</code> 文件，里面写入推荐使用的 Node.js 版本号，如 <code>16.16.0</code>。这样，当进入项目目录后，使用 <code>nvm use</code> 命令（无需指定版本），nvm 会自动读取 <code>.nvmrc</code> 文件并切换到指定的 Node.js 版本。</li></ul></li><li><p><strong>自动切换版本</strong>：</p><ul><li>利用 <code>nvm</code> 的自动切换功能，可以设置 <code>nvm</code> 在每次进入项目目录时自动检测并使用 <code>.nvmrc</code> 文件中指定的版本。这可以通过在 shell 配置文件（如 <code>.bashrc</code>, <code>.zshrc</code>）中添加以下代码实现：<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment">## 自动加载项目中的 .nvmrc 文件</span></span>
<span class="line">autoload <span class="token parameter variable">-U</span> add-zsh-hook</span>
<span class="line">add-zsh-hook chpwd load-nvmrc</span>
<span class="line"><span class="token function-name function">load-nvmrc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-f</span> .nvmrc <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span></span>
<span class="line">    nvm use</span>
<span class="line">  <span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token parameter variable">-f</span> <span class="token punctuation">..</span>/.nvmrc <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span></span>
<span class="line">    nvm use</span>
<span class="line">  <span class="token keyword">fi</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">## 初始化加载</span></span>
<span class="line">load-nvmrc</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>注意：这段代码适用于Zsh，对于Bash或其他shell，语法可能略有不同。</li></ul></li><li><p><strong>批量管理项目</strong>：</p><ul><li>如果你有多个项目需要频繁切换，可以利用终端的多标签页或者工作区功能，为每个项目打开一个独立的终端会话，每个会话保持在对应项目的目录下，并已切换到正确的 Node.js 版本。</li></ul></li><li><p><strong>脚本自动化</strong>：</p><ul><li>对于复杂的项目结构或特殊需求，可以编写脚本来自动化版本切换和启动开发环境的过程。例如，编写一个简单的脚本，先切换 Node.js 版本，然后启动开发服务器或执行其他必要的命令。</li></ul></li><li><p><strong>定期更新 nvm 和 Node.js</strong>：</p><ul><li>保持 <code>nvm</code> 和 Node.js 版本最新，以便获得最新的特性和安全修复。使用 <code>nvm update</code> 更新 <code>nvm</code> 本身，用 <code>nvm install latest</code> 安装最新的 Node.js 版本。</li></ul></li><li><p><strong>环境隔离</strong>：</p><ul><li>如果你在同一台机器上同时开发多个项目，使用虚拟环境（如 Docker 容器或 VMs）可以进一步隔离项目环境，每个环境可以预装所需版本的 Node.js，减少版本冲突的风险。</li></ul></li></ol><p>遵循这些实践，你可以有效地在不同项目间快速、准确地切换 Node.js 版本，提高开发效率并减少潜在的版本兼容性问题。</p><h2 id="配置了-nvmrc文件-使用-nvm-use-命令后返回invalid-version" tabindex="-1"><a class="header-anchor" href="#配置了-nvmrc文件-使用-nvm-use-命令后返回invalid-version"><span>配置了.nvmrc文件，使用 nvm use 命令后返回Invalid version.</span></a></h2><p>如果你在项目中配置了 <code>.nvmrc</code> 文件，并尝试使用 <code>nvm use</code> 命令时收到 &quot;Invalid version.&quot; 的错误信息，这通常意味着 <code>nvm</code> 无法识别 <code>.nvmrc</code> 文件中指定的 Node.js 版本号格式。这可能由以下原因引起：</p><ol><li><p><strong>版本号格式错误</strong>：确保 <code>.nvmrc</code> 文件中的版本号格式正确无误。正确的格式通常是 <code>x.y.z</code>，其中 x、y 和 z 分别代表主版本号、次版本号和补丁版本号。例如：<code>16.14.0</code>。检查是否有拼写错误，多余的字符，或是使用了非数字字符。</p></li><li><p><strong>包含前导或尾随空白字符</strong>：有时候，编辑器或意外的操作可能导致 <code>.nvmrc</code> 文件中版本号前后有空格、制表符等空白字符。确保版本号周围没有多余的空白字符。</p></li><li><p><strong>编码问题</strong>：虽然较为罕见，但文件编码问题也可能导致 <code>nvm</code> 无法正确读取版本号。确保 <code>.nvmrc</code> 文件保存为普通的文本格式，如 UTF-8 编码。</p></li><li><p><strong>版本号不存在</strong>：确认所指定的 Node.js 版本是否真实存在并且已被 <code>nvm</code> 索引。你可以通过运行 <code>nvm ls-remote</code> 查看所有可安装的 Node.js 版本。如果版本号确实不存在，你需要在 <code>.nvmrc</code> 中替换为一个有效的版本号。</p></li></ol><p>解决步骤如下：</p><ul><li>打开 <code>.nvmrc</code> 文件，检查并修正版本号。</li><li>清除版本号周围的任何空白字符。</li><li>确认文件编码无误。</li><li>使用 <code>nvm ls-remote</code> 确认版本号的有效性。</li><li>再次尝试运行 <code>nvm use</code>。</li></ul><p>如果问题依旧存在，尝试手动删除 <code>.nvmrc</code> 文件中的内容，重新输入正确的版本号，保存后再次执行 <code>nvm use</code>。如果以上步骤都无法解决问题，可能需要检查 <code>nvm</code> 是否正确安装和配置，或者考虑重新安装 <code>nvm</code>。</p><h2 id="为什么我本地nvm-version返回的是1-1-9" tabindex="-1"><a class="header-anchor" href="#为什么我本地nvm-version返回的是1-1-9"><span>为什么我本地nvm version返回的是1.1.9?</span></a></h2><p>本地的 <code>nvm</code> 返回版本号 <code>1.1.9</code> 表明你可能使用了一个不同的 <code>nvm</code> 实现。<code>nvm</code> 有多个不同的实现，其中一些针对特定的平台或环境：</p><ol><li><strong>nvm-sh (Node Version Manager)</strong>: 这是最常用的 <code>nvm</code> 实现，通常在 Unix 系统上使用（如 Linux 和 macOS）。它的最新版本通常是 <code>0.xx.x</code> 系列。</li><li><strong>nvm-windows</strong>: 这是 <code>nvm</code> 的 Windows 实现，版本号通常在 <code>1.xx.x</code> 系列。</li></ol><p>你提到的 <code>1.1.9</code> 版本可能是 <code>nvm-windows</code>。以下是一些相关的信息和解决方法：</p><ul><li><p>检查和安装正确的 <code>nvm</code> 版本</p><ul><li>如果你在使用 Unix 系统（Linux, macOS）</li></ul></li></ul><ol><li><p><strong>卸载当前版本</strong>: 如果你安装了错误的 <code>nvm</code> 版本，首先卸载它。这个步骤因系统和安装方式不同而异，但一般情况下可以使用：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">rm</span> <span class="token parameter variable">-rf</span> ~/.nvm</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>重新安装 <code>nvm-sh</code></strong>: 按照以下步骤安装 <code>nvm-sh</code>：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">curl</span> -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.2/install.sh <span class="token operator">|</span> <span class="token function">bash</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>或者使用 wget：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">wget</span> -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.2/install.sh <span class="token operator">|</span> <span class="token function">bash</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>加载 nvm</strong>: 确保在当前 shell session 中加载 <code>nvm</code>。可以在 <code>.bashrc</code>、<code>.bash_profile</code>、<code>.zshrc</code> 或其他 shell 配置文件中添加以下行：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token builtin class-name">export</span> <span class="token assign-left variable">NVM_DIR</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span><span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">&quot;<span class="token variable">\${XDG_CONFIG_HOME-}</span>&quot;</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">printf</span> %s <span class="token string">&quot;<span class="token variable">\${<span class="token environment constant">HOME</span>}</span>/.nvm&quot;</span> <span class="token operator">||</span> <span class="token builtin class-name">printf</span> %s <span class="token string">&quot;<span class="token variable">\${XDG_CONFIG_HOME}</span>/nvm&quot;</span><span class="token variable">)</span></span>&quot;</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token parameter variable">-s</span> <span class="token string">&quot;<span class="token variable">$NVM_DIR</span>/nvm.sh&quot;</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\\</span>. <span class="token string">&quot;<span class="token variable">$NVM_DIR</span>/nvm.sh&quot;</span> <span class="token comment">## This loads nvm</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后重新启动终端或运行以下命令使配置文件生效：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token builtin class-name">source</span> ~/.bashrc</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>或</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token builtin class-name">source</span> ~/.zshrc</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><blockquote><p>如果你在使用 Windows</p></blockquote><ol><li><p><strong>使用 nvm-windows</strong>: 如果你在 Windows 上，<code>nvm-windows</code> 可能是你更合适的选择。你可以从 <a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener noreferrer">nvm-windows releases</a> 页面下载最新版本并按照安装说明进行安装。</p></li><li><p><strong>检查版本</strong>: 安装后，可以使用以下命令检查 <code>nvm-windows</code> 的版本：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">nvm version</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><blockquote><p>确认 nvm 正常工作</p></blockquote><p>无论你使用的是哪种实现，确保安装正确并加载后，以下命令应该正常工作：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">nvm ls-remote</span>
<span class="line">nvm <span class="token function">install</span> <span class="token operator">&lt;</span>version<span class="token operator">&gt;</span></span>
<span class="line">nvm use <span class="token operator">&lt;</span>version<span class="token operator">&gt;</span></span>
<span class="line">nvm <span class="token function">ls</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>总结</p></blockquote><p>你当前看到的 <code>1.1.9</code> 版本可能是 <code>nvm-windows</code>。如果你使用的是 Unix 系统，建议卸载当前的 <code>nvm</code> 版本并安装 <code>nvm-sh</code>。如果你使用的是 Windows 系统，则继续使用 <code>nvm-windows</code> 并参考它的文档和帮助信息。</p><h2 id="nvm-windows-如何使用-npmrc" tabindex="-1"><a class="header-anchor" href="#nvm-windows-如何使用-npmrc"><span>nvm-windows 如何使用.npmrc?</span></a></h2><p><code>nvm-windows</code> 默认不支持 <code>.nvmrc</code> 文件，但你可以通过一些手动步骤来实现类似的功能。以下是一些方法来在 <code>nvm-windows</code> 上使用 <code>.nvmrc</code> 文件：</p><blockquote><p>方法 1：手动切换版本</p></blockquote><ol><li><p><strong>创建 <code>.nvmrc</code> 文件</strong>: 在你的项目根目录中创建一个 <code>.nvmrc</code> 文件，并在其中写入你希望使用的 Node.js 版本，例如：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">14.17.0</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>手动读取并切换版本</strong>: 每次进入项目目录时，可以手动读取 <code>.nvmrc</code> 文件并切换 Node.js 版本。你可以在 PowerShell 中运行以下命令：</p><div class="language-powershell line-numbers-mode" data-highlighter="prismjs" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="line"><span class="token variable">$version</span> = <span class="token function">Get-Content</span> <span class="token punctuation">.</span>nvmrc</span>
<span class="line">nvm use <span class="token variable">$version</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><blockquote><p>方法 2：使用 PowerShell 脚本自动切换版本</p></blockquote><ol><li><p><strong>创建 PowerShell 脚本</strong>: 创建一个 PowerShell 脚本（例如 <code>use-node.ps1</code>）并将其放在你的项目根目录中。脚本内容如下：</p><div class="language-powershell line-numbers-mode" data-highlighter="prismjs" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="line"><span class="token variable">$version</span> = <span class="token function">Get-Content</span> <span class="token punctuation">.</span>nvmrc</span>
<span class="line">nvm use <span class="token variable">$version</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>运行脚本</strong>: 每次进入项目目录时，运行这个脚本来切换 Node.js 版本：</p><div class="language-powershell line-numbers-mode" data-highlighter="prismjs" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="line"><span class="token punctuation">.</span>\\<span class="token function">use-node</span><span class="token punctuation">.</span>ps1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><blockquote><p>方法 3：在 PowerShell 配置中自动切换</p></blockquote><p>如果你希望在进入项目目录时自动切换版本，可以在 PowerShell 配置文件中添加以下内容：</p><ol><li><p><strong>编辑 PowerShell 配置文件</strong>: 打开或创建你的 PowerShell 配置文件（<code>$PROFILE</code>）。</p></li><li><p><strong>添加以下代码</strong>: 将以下代码添加到配置文件中，以便在每次进入包含 <code>.nvmrc</code> 文件的目录时自动切换 Node.js 版本：</p><div class="language-powershell line-numbers-mode" data-highlighter="prismjs" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="line"><span class="token keyword">function</span> <span class="token function">Set-NodeVersion</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Test-Path</span> <span class="token punctuation">.</span>nvmrc<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token variable">$version</span> = <span class="token function">Get-Content</span> <span class="token punctuation">.</span>nvmrc</span>
<span class="line">        nvm use <span class="token variable">$version</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$ExecutionContext</span><span class="token punctuation">.</span>InvokeCommand<span class="token punctuation">.</span>InvokeScript<span class="token punctuation">(</span><span class="token string">&quot;Register-ObjectEvent -InputObject (Get-PSProvider -PSProvider FileSystem).Drives -EventName &#39;PropertyChanged&#39; -Action {</span>
<span class="line">    <span class="token variable">$global</span>:location = (Get-Location).Path</span>
<span class="line">    Set-NodeVersion</span>
<span class="line">}&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>重启 PowerShell</strong>: 重启 PowerShell 以使配置文件生效。</p></li></ol><blockquote><p>总结</p></blockquote><p>虽然 <code>nvm-windows</code> 没有内置对 <code>.nvmrc</code> 文件的支持，但通过上述方法，你可以手动或自动实现类似的功能。手动方法适合偶尔使用，而自动方法可以提高日常工作的效率。</p>`,34),i=[o];function c(t,p){return e(),s("div",null,i)}const r=n(l,[["render",c],["__file","nvm.html.vue"]]),v=JSON.parse('{"path":"/tools/others/nvm.html","title":"","lang":"zh","frontmatter":{},"headers":[{"level":2,"title":"如何更高效的在不同项目使用nvm切换不同的node版本","slug":"如何更高效的在不同项目使用nvm切换不同的node版本","link":"#如何更高效的在不同项目使用nvm切换不同的node版本","children":[]},{"level":2,"title":"配置了.nvmrc文件，使用 nvm use 命令后返回Invalid version.","slug":"配置了-nvmrc文件-使用-nvm-use-命令后返回invalid-version","link":"#配置了-nvmrc文件-使用-nvm-use-命令后返回invalid-version","children":[]},{"level":2,"title":"为什么我本地nvm version返回的是1.1.9?","slug":"为什么我本地nvm-version返回的是1-1-9","link":"#为什么我本地nvm-version返回的是1-1-9","children":[]},{"level":2,"title":"nvm-windows 如何使用.npmrc?","slug":"nvm-windows-如何使用-npmrc","link":"#nvm-windows-如何使用-npmrc","children":[]}],"git":{"updatedTime":1721212931000,"contributors":[{"name":"linannan","email":"linannan@prosnav.com","commits":1}]},"filePathRelative":"tools/others/nvm.md"}');export{r as comp,v as data};
