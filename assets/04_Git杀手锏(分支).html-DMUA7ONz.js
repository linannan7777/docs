import{_ as t,c as e,o as a,d as i}from"./app-CfKFMHBg.js";const h={},s=i('<h3 id="git分支本质" tabindex="-1"><a class="header-anchor" href="#git分支本质"><span>git分支本质</span></a></h3><p>分支本质是一个提交对象,所有的分支都会有机会被HEAD所引用(HEAD一个时刻只会指向一个分支) 当我们有新的提交的时候 HEAD会携带当前持有的分支往前移动</p><h3 id="git分支命令" tabindex="-1"><a class="header-anchor" href="#git分支命令"><span>git分支命令</span></a></h3><p>创建分支 : git branch branchname 切换分支 : git checkout branchname 创建&amp;切换分支 : git checkout -b branchname 版本穿梭(时光机) : git branch branchname commitHash<br> 普通删除分支 : git branch -d branchname 强制删除分支 : git branch -D branchname 合并分支 : git merge branchname 快进合并 --&gt; 不会产生冲突 典型合并 --&gt; 有机会产生冲突 解决冲突 --&gt; 打开冲突的文件 进行修改 add commit</p><p>查看分支列表 : git branch 查看合并到当前分支的分支列表: git branch --merged 一旦出现在这个列表中 就应该删除 查看没有合并到当前分支的分支列表: git branch --no-merged 一旦出现在这个列表中 就应该观察一下是否需要合并</p><h3 id="git分支的注意点" tabindex="-1"><a class="header-anchor" href="#git分支的注意点"><span>git分支的注意点</span></a></h3><p>在切换的时候 一定要保证当前分支是干净的!!! 允许切换分支: 分支上所有的内容处于 已提交状态<br> (避免)分支上的内容是初始化创建 处于未跟踪状态 (避免)分支上的内容是初始化创建 第一次处于已暂存状态 不允许切分支: 分支上所有的内容处于 已修改状态 或 第二次以后的已暂存状态</p><p>在分支上的工作做到一半时 如果有切换分支的需求, 我们应该将现有的工作存储起来 git stash : 会将当前分支上的工作推到一个栈中 分支切换 进行其他工作 完成其他工作后 切回原分支 git stash apply : 将栈顶的工作内容还原 但不让任何内容出栈 git stash drop : 取出栈顶的工作内容后 就应该将其删除(出栈) git stash pop : git stash apply + git stash drop git stash list : 查看存储</p><h3 id="后悔药" tabindex="-1"><a class="header-anchor" href="#后悔药"><span>后悔药</span></a></h3><p>撤销工作目录的修改 : git checkout -- filename 撤销暂存区的修改 : git reset HEAD filename 撤销提交 : git commit --amend</p><h3 id="reset三部曲" tabindex="-1"><a class="header-anchor" href="#reset三部曲"><span>reset三部曲</span></a></h3><p>git reset --soft commithash ---&gt; 用commithash的内容重置HEAD内容 git reset [--mixed] commithash ---&gt; 用commithash的内容重置HEAD内容 重置暂存区 git reset --hard commithash ---&gt; 用commithash的内容重置HEAD内容 重置暂存区 重置工作目录</p><h3 id="路径reset" tabindex="-1"><a class="header-anchor" href="#路径reset"><span>路径reset</span></a></h3><p>所有的路径reset都要省略第一步!!! 第一步是重置HEAD内容 我们知道HEAD本质指向一个分支 分支的本质是一个提交对象 提交对象 指向一个树对象 树对象又很有可能指向多个git对象 一个git对象代表一个文件!!! HEAD可以代表一系列文件的状态!!!! git reset [--mixed] commithash filename<br> 用commithash中filename的内容重置暂存区</p><h3 id="checkout深入理解" tabindex="-1"><a class="header-anchor" href="#checkout深入理解"><span>checkout深入理解</span></a></h3><p>git checkout brancname 跟 git reset --hard commithash特别像 共同点 都需要重置 HEAD 暂存区 工作目录 区别 checkout对工作目录是安全的 reset --hard是强制覆盖 checkout动HEAD时不会带着分支走而是切换分支 reset --hard时是带着分支走</p><p>checkout + 路径 git checkout commithash filename<br> 重置暂存区 重置工作目录 git checkout -- filename<br> 重置工作目录</p>',17),c=[s];function n(r,l){return a(),e("div",null,c)}const o=t(h,[["render",n],["__file","04_Git杀手锏(分支).html.vue"]]),m=JSON.parse('{"path":"/tools/git/04_Git%E6%9D%80%E6%89%8B%E9%94%8F(%E5%88%86%E6%94%AF).html","title":"","lang":"zh","frontmatter":{},"headers":[{"level":3,"title":"git分支本质","slug":"git分支本质","link":"#git分支本质","children":[]},{"level":3,"title":"git分支命令","slug":"git分支命令","link":"#git分支命令","children":[]},{"level":3,"title":"git分支的注意点","slug":"git分支的注意点","link":"#git分支的注意点","children":[]},{"level":3,"title":"后悔药","slug":"后悔药","link":"#后悔药","children":[]},{"level":3,"title":"reset三部曲","slug":"reset三部曲","link":"#reset三部曲","children":[]},{"level":3,"title":"路径reset","slug":"路径reset","link":"#路径reset","children":[]},{"level":3,"title":"checkout深入理解","slug":"checkout深入理解","link":"#checkout深入理解","children":[]}],"git":{"updatedTime":1721098889000,"contributors":[{"name":"linannan","email":"linannan@prosnav.com","commits":1}]},"filePathRelative":"tools/git/04_Git杀手锏(分支).md"}');export{o as comp,m as data};
