import{_ as s,c as e,o as a,d as r}from"./app-BFPhRmaa.js";const n={},t=r(`<h1 id="vite配置文件中css配置流程-preprocessoroptions篇" tabindex="-1"><a class="header-anchor" href="#vite配置文件中css配置流程-preprocessoroptions篇"><span>vite配置文件中css配置流程(preprocessorOptions篇)</span></a></h1><p>主要是用来配置css预处理的一些全局参数</p><p>假设没有使用构建工具, 我们又想去编译less文件的话</p><div class="language-r line-numbers-mode" data-highlighter="prismjs" data-ext="r" data-title="r"><pre class="language-r"><code><span class="line">yarn add less <span class="token comment"># lessc的编译器</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>你只要安装了node, 你就可以使用node index.js 你只要安装了less 你就可以使用lessc去编译less文件</p><p>less是可以定义变量的</p><h2 id="sourcemap" tabindex="-1"><a class="header-anchor" href="#sourcemap"><span>sourceMap</span></a></h2><p>文件之间的索引:</p><p>假设我们的代码被压缩或者被编译过了, 这个时候假设程序出错, 他将不会产生正确的错误位置信息 如果设置了sourceMap, 他就会有一个索引文件map</p><p>sourceMap解决的问题极其的微小, 但是他的实现过程非常的复杂</p>`,10),o=[t];function p(c,i){return a(),e("div",null,o)}const d=s(n,[["render",p],["__file","12. vite配置文件中css配置流程(preprocessorOptions篇).html.vue"]]),_=JSON.parse('{"path":"/frontend/vite/12.%20vite%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%ADcss%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B(preprocessorOptions%E7%AF%87).html","title":"vite配置文件中css配置流程(preprocessorOptions篇)","lang":"zh","frontmatter":{},"headers":[{"level":2,"title":"sourceMap","slug":"sourcemap","link":"#sourcemap","children":[]}],"git":{"updatedTime":1721029030000,"contributors":[{"name":"linannan","email":"linannan@prosnav.com","commits":1}]},"filePathRelative":"frontend/vite/12. vite配置文件中css配置流程(preprocessorOptions篇).md"}');export{d as comp,_ as data};
