import{_ as s,c as t,o as a,b as n}from"./app-CstveDQQ.js";const e={},p=n(`<h1 id="postcss" tabindex="-1"><a class="header-anchor" href="#postcss"><span>postcss</span></a></h1><p>vite天生对postcss有非常良好的支持</p><p>全屋净水系统有一个了解</p><p>水龙头里来的水是自来水</p><p>自来水 从 管道里 先到这个全屋净水系统 给全屋净水系统做一些插槽 ---&gt; 去除砂砾 --&gt; 净化细菌微生物 ---&gt; ... --&gt; 输送到水龙头 --&gt; 我们可以喝的纯净水 （为了保证到我们嘴里喝的水是万无一失）</p><p>postcss 他的工作基本和全屋净水系统一致: 保证css在执行起来是万无一失的</p><p><strong>都对postcss有一个误区: 他们认为postcss和less sass是差不多级别</strong></p><p>我们写的css代码(怎么爽怎么来) --&gt; postcss ---&gt; less --&gt; 再次对未来的高级css语法进行降级 --&gt; 前缀补全 --&gt; 浏览器客户端</p><p>目前来说 less和sass等一系列预处理器的postcss插件已经停止维护了 less插件 你自己去用less和sass编译完了, 然后你把编译结果给我</p><p><strong>所以业内就产生了一个新的说法: postcss是后处理器</strong> less的postcss的插件就ok了</p><p>我们写的js代码(怎么爽怎么来) --&gt; babel --&gt; 将最新的ts语法进行转换js语法 --&gt; 做一次语法降级 --&gt; 浏览器客户端去执行</p><p>babel --&gt; 帮助我们让js执行起来万无一失</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// es6的写法</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// es3的语法</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>浏览器的兼容性你能考虑到吗, 预处理器并不能够解决这些问题:</p><ol><li>对未来css属性的一些使用降级问题</li><li>前缀补全: Google非常卷 --webkit</li></ol><h2 id="使用postcss" tabindex="-1"><a class="header-anchor" href="#使用postcss"><span>使用postcss</span></a></h2><ol><li>安装依赖</li></ol><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">yarn add postcss-cli postcss -D</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="2"><li>书写描述文件</li></ol><p>postcss配置文件的格式</p><ul><li>postcss.config.js</li></ul>`,21),l=[p];function c(o,i){return a(),t("div",null,l)}const d=s(e,[["render",c],["__file","13. postcss.html.vue"]]),u=JSON.parse('{"path":"/frontend/vite/13.%20postcss.html","title":"postcss","lang":"zh","frontmatter":{},"headers":[{"level":2,"title":"使用postcss","slug":"使用postcss","link":"#使用postcss","children":[]}],"git":{"updatedTime":1721029030000,"contributors":[{"name":"linannan","email":"linannan@prosnav.com","commits":1}]},"filePathRelative":"frontend/vite/13. postcss.md"}');export{d as comp,u as data};
