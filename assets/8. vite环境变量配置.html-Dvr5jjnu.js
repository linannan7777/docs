import{_ as e,c as n,o as s,d as t}from"./app-CxrMoykp.js";const a={},i=t(`<h1 id="vite环境变量配置" tabindex="-1"><a class="header-anchor" href="#vite环境变量配置"><span>vite环境变量配置</span></a></h1><blockquote><p>环境变量: 会根据当前的代码环境产生值的变化的变量就叫做环境变量</p></blockquote><p>代码环境:</p><ol><li>开发环境</li><li>测试环境</li><li>预发布环境</li><li>灰度环境</li><li>生产环境</li></ol><p>举个例子: 百度地图sdk, 小程序的sdk</p><p>APP_KEY: 测试环境和生产还有开发环境是不一样的key</p><ul><li>开发环境: 110</li><li>生产环境: 111</li><li>测试环境: 112</li></ul><p>我们去请求第三方sdk接口的时候需要带上的一个身份信息</p><p>我们在和后端同学对接的时候, 前端在开发环境中请求的后端API地址和生产环境的后端API地址是一个吗？ 肯定不是同一个</p><ul><li>开发和测试: http://test.api/</li><li>生产: https://api/</li></ul><p>在vite中的环境变量处理:</p><p>vite内置了dotenv这个第三方库</p><p>dotenv会自动读取.env文件, 并解析这个文件中的对应环境变量 并将其注入到process对象下(但是vite考虑到和其他配置的一些冲突问题, 他不会直接注入到process对象下)</p><p>涉及到vite.config.js中的一些配置:</p><ul><li>root</li><li>envDir: 用来配置当前环境变量的文件地址</li></ul><p>vite给我们提供了一些补偿措施:我们可以调用vite的loadEnv来手动确认env文件</p><p>process.cwd方法: 返回当前node进程的工作目录</p><p>.env: 所有环境都需要用到的环境变量 .env.development: 开发环境需要用到的环境变量(默认情况下vite将我们的开发环境取名为development) .env.production: 生产环境需要用到的环境变量(默认情况下vite将我们的生产环境取名为production)</p><p>yarn dev --mode development 会将mode设置为development传递进来</p><p>当我们调用loadenv的时候, 他会做如下几件事:</p><ol><li>直接找到.env文件不解释 并解析其中的环境变量 并放进一个对象里</li><li>会将传进来的mode这个变量的值进行拼接: <code>.env.development</code>, 并根据我们提供的目录去取对应的配置文件并进行解析, 并放进一个对象</li><li>我们可以理解为<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"> <span class="token keyword">const</span> baseEnvConfig <span class="token operator">=</span> 读取<span class="token punctuation">.</span>env的配置</span>
<span class="line"> <span class="token keyword">const</span> modeEnvConfig <span class="token operator">=</span> 读取env相关配置</span>
<span class="line"> <span class="token keyword">const</span> lastEnvConfig <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>baseEnvConfig<span class="token punctuation">,</span> <span class="token operator">...</span>modeEnvConfig <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>如果是客户端, vite会将对应的环境变量注入到import.meta.env里去</p><p>vite做了一个拦截, 他为了防止我们将隐私性的变量直接送进import.meta.env中, 所以他做了一层拦截, 如果你的环境变量不是以VITE开头的, 他就不会帮你注入到客户端中去, 如果我们想要更改这个前缀, 可以去使用envPrefix配置</p><p>补充一个小知识: 为什么vite.config.js可以书写成esmodule的形式, 这是因为vite他在读取这个vite.config.js的时候会率先node去解析文件语法, 如果发现你是esmodule规范会直接将你的esmodule规范进行替换变成commonjs规范</p>`,24),o=[i];function p(l,c){return s(),n("div",null,o)}const d=e(a,[["render",p],["__file","8. vite环境变量配置.html.vue"]]),r=JSON.parse('{"path":"/frontend/vite/8.%20vite%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE.html","title":"vite环境变量配置","lang":"zh","frontmatter":{},"headers":[],"git":{"updatedTime":1721029030000,"contributors":[{"name":"linannan","email":"linannan@prosnav.com","commits":1}]},"filePathRelative":"frontend/vite/8. vite环境变量配置.md"}');export{d as comp,r as data};
