import{_ as e,c as l,o as s,d as t}from"./app-BFPhRmaa.js";const i={},a=t(`<h1 id="什么是构建工具" tabindex="-1"><a class="header-anchor" href="#什么是构建工具"><span>什么是构建工具</span></a></h1><blockquote><p>浏览器他只认识html, css, js</p></blockquote><p>企业级项目里都可能会具备哪些功能</p><ol><li>typescript: 如果遇到ts文件我们需要使用tsc将typescript代码转换为js代码</li><li>React/Vue: 安装react-compiler / vue-complier, 将我们写的jsx文件或者.vue文件转换为render函数</li><li>less/sass/postcss/component-style: 我们又需要安装less-loader, sass-loader等一系列编译工具</li><li>语法降级: babel ---&gt; 将es的新语法转换旧版浏览器可以接受的语法</li><li>体积优化: uglifyjs ---&gt; 将我们的代码进行压缩变成体积更小性能更高的文件</li><li>.....</li></ol><p>稍微改一点点东西, 非常麻烦</p><p>将App.tsx ---&gt; tsc ---&gt; App.jsx ---&gt; React-complier ---&gt; js文件</p><p>有一个东西能够帮你把tsc, react-compiler, less, babel, uglifyjs全部集成到一起</p><p>我们只需要关心我们写的代码就好了</p><p>我们写的代码一变化 ---&gt; 有人帮我们自动去tsc, react-compiler, less, babel, uglifyjs全部挨个走一遍 ---&gt; js</p><p>这个东西就叫做<strong>构建工具</strong></p><blockquote><p>打包: 将我们写的浏览器不认识的代码 交给构建工具进行编译处理的过程就叫做打包, 打包完成以后会给我们一个浏览器可以认识的文件</p></blockquote><p>一个构建工具他到底承担了哪些脏活累活:</p><ol><li>模块化开发支持: 支持直接从node_modules里引入代码 + 多种模块化支持</li><li>处理代码兼容性: 比如babel语法降级, less,ts 语法转换(<strong>不是构建工具做的, 构建工具将这些语法对应的处理工具集成进来自动化处理</strong>)</li><li>提高项目性能: 压缩文件, <strong>代码分割</strong></li><li>优化开发体验: <ul><li>构建工具会帮你自动监听文件的变化, 当文件变化以后自动帮你调用对应的集成工具进行重新打包, 然后再浏览器重新运行（整个过程叫做热更新, hot replacement</li><li>开发服务器: 跨域的问题, 用react-cli create-react-element vue-cli 解决跨域的问题,</li></ul></li></ol><p>每次改一点 ---&gt; 这个顺序还不能错</p><p>构建工具他让我们可以不用每次都关心我们的代码在浏览器如何运行, 我们只需要首次给构建工具提供一个配置文件(这个配置文件也不是必须的, 如果你不给他 他会有默认的帮你去处理), 有了这个集成的配置文件以后, 我们就可以在下次需要更新的时候调用一次对应的命令就好了, 如果我们再结合热更新, 我们就更加不需要管任何东西, 这就是构建工具去做的东西, <strong>他让我们不用关心生产的代码也不用关心代码如何在浏览器运行, 只需要关心我们的开发怎么写的爽怎么写就好了</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">tsc xxx babel xx less xx</span>
<span class="line">webpack</span>
<span class="line"></span>
<span class="line">... </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你如果听的有点懵 也没关系 <strong>集成</strong>的工作</p><p>市面上主流的构建工具有哪些:</p><ul><li>webpack</li><li>vite</li><li>parcel</li><li>esbuild</li><li>rollup</li><li>grunt</li><li>gulp</li></ul>`,19),n=[a];function p(c,r){return s(),l("div",null,n)}const d=e(i,[["render",p],["__file","2. 什么是构建工具.html.vue"]]),u=JSON.parse('{"path":"/frontend/vite/2.%20%E4%BB%80%E4%B9%88%E6%98%AF%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7.html","title":"什么是构建工具","lang":"zh","frontmatter":{},"headers":[],"git":{"updatedTime":1721029030000,"contributors":[{"name":"linannan","email":"linannan@prosnav.com","commits":1}]},"filePathRelative":"frontend/vite/2. 什么是构建工具.md"}');export{d as comp,u as data};
